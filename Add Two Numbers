/** the problem: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order,
 and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
*/You may assume the two numbers do not contain any leading zero, except the number 0 itself.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
     int dig1, dig2, sum, carry=0;
     ListNode l3 ;
     
     int firstDig = (l1.val + l2.val)%10 ;
     carry = (l1.val + l2.val)/10;
     l3 = new ListNode(firstDig); 
    
     ListNode temp = l3;

     l1 = l1.next;
     l2 = l2.next;

     while (l1 != null || l2 != null){
        dig1 = (l1 != null)? l1.val : 0 ;
        dig2 = (l2 != null)? l2.val : 0 ;
        sum = (dig1 + dig2 + carry)%10 ;
        carry = (dig1 + dig2 + carry)/10;
        temp.next = new ListNode(sum);
        temp= temp.next;
        if(l1 != null)
            l1 = l1.next;
        if (l2 != null)
            l2 = l2.next;
     }

        if( carry !=0 ){
             temp.next = new ListNode(carry);
        }

     return l3;
    }

}
